syntax = "proto3";

package proxy;

option go_package = "github.com/artilugio0/proxy-vibes/internal/grpc/proto";

// ProxyService defines the gRPC service for client registration and communication.
service ProxyService {
  rpc RequestIn(Register) returns (stream HttpRequest) {}
  rpc RequestMod(stream RequestModClientMessage) returns (stream HttpRequest) {}
  rpc RequestOut(Register) returns (stream HttpRequest) {}

  rpc ResponseIn(Register) returns (stream HttpResponse) {}
  rpc ResponseMod(stream ResponseModClientMessage) returns (stream HttpResponse) {}
  rpc ResponseOut(Register) returns (stream HttpResponse) {}

  rpc SetConfig(Config) returns (Null) {}
  rpc GetConfig(Null) returns (Config) {}
}

message Header {
    string name = 1;
    string value = 2;
}

message RequestModClientMessage {
    oneof msg {
        Register register = 1;
        HttpRequest modifiedRequest = 2;
    }
}

message ResponseModClientMessage {
    oneof msg {
        Register register = 1;
        HttpResponse modifiedResponse = 2;
    }
}

message Register {
    string name = 1;
}

// HttpRequest represents an HTTP request.
message HttpRequest {
  string id = 1;
  string method = 2;
  string url = 3;
  repeated Header headers = 4;
  bytes body = 5;
}

// HttpResponse represents an HTTP response.
message HttpResponse {
  string id = 1;
  int32 status_code = 2;
  repeated Header headers = 3;
  bytes body = 4;
}

message Config {
	string db_file = 3;
	bool print_logs = 4;
	string save_dir = 5;
}

message Null {}
